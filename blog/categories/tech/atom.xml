<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Tech | 丘海东]]></title>
  <link href="https://qiuhaidong.github.io/blog/categories/tech/atom.xml" rel="self"/>
  <link href="https://qiuhaidong.github.io/"/>
  <updated>2022-02-26T20:05:48+08:00</updated>
  <id>https://qiuhaidong.github.io/</id>
  <author>
    <name><![CDATA[丘海东]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[No Binary Rubies Available for: ubuntu/20.04/x86_64/ruby-2.2.6]]></title>
    <link href="https://qiuhaidong.github.io/blog/2022/01/12/no-binary-rubies-available-for-ubuntu-slash-20-dot-04-slash-x86-64-slash-ruby-2-dot-2-6/"/>
    <updated>2022-01-12T19:03:01+08:00</updated>
    <id>https://qiuhaidong.github.io/blog/2022/01/12/no-binary-rubies-available-for-ubuntu-slash-20-dot-04-slash-x86-64-slash-ruby-2-dot-2-6</id>
    <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/qq_41988167/article/details/106202868">No binary rubies available for: ubuntu/20.04/x86_64/ruby-2.2.6;;Error running requirements_debian_libs_install libssl1.0-dev</a></p>

<p>原博内容：</p>

<p>rvm安装低版本ruby报错Error running ‘requirements_debian_libs_install libssl1.0-dev’,Requirements installation failed with status: 100.</p>

<p>由于参与的一个项目在用2.3.1版本的ruby，所以想用rvm来安装ruby2.3.1。运行报错，需要libssl1.0-dev.<br/>
解决办法：</p>

<ul>
<li>运行</li>
</ul>


<pre><code>sudo gedit /etc/apt/sources.list
</code></pre>

<p>在<code>/etc/apt/sources.list</code> 中添加下载源 <code>deb http://security.ubuntu.com/ubuntu bionic-security main</code>。保存退出。</p>

<ul>
<li>更新</li>
</ul>


<pre><code>sudo apt update
</code></pre>

<ul>
<li>安装</li>
</ul>


<pre><code>apt-cache policy libssl1.0-dev  #（这步我没有做，先不做）
</code></pre>

<p>然后再安装<code>rvm install 2.2.6</code></p>

<p>————————————————<br/>
版权声明：本文为CSDN博主「会打滚的咸鱼」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。
原文链接：<a href="https://blog.csdn.net/qq_41988167/article/details/106202868">https://blog.csdn.net/qq_41988167/article/details/106202868</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ubuntu 安装后wifi无法使用]]></title>
    <link href="https://qiuhaidong.github.io/blog/2022/01/11/ubuntu-wifi-do-not-work/"/>
    <updated>2022-01-11T04:38:50+08:00</updated>
    <id>https://qiuhaidong.github.io/blog/2022/01/11/ubuntu-wifi-do-not-work</id>
    <content type="html"><![CDATA[<h3>原文件是ubuntu16.04安装了octopress2.0，升级到ubuntu18.04，新建此文件，可以运行，没报错，然后改成这个内容</h3>

<p>首先利用<code>rfkill</code>命令查看目前无线传输设备的状态，<code>rfkill</code>是一个命令行工具，可使用它查询和更改系统中启用了RFKill的设备。</p>

<p>rfkill的常用方法为:</p>

<pre><code>rfkill list all
#  获得设备列表

rfkill block [index|type]
#  通过索引或类型禁用设备

rfkill unblock [index|type]
#  通过索引或类型启用设备
</code></pre>

<p>当前设备状态如下：</p>

<pre><code>rfkill list all
输出：
0: phy0: Wireless LAN
    Soft blocked: no
    Hard blocked: yes
1: acer-wireless: Wireless LAN
    Soft blocked: no
    Hard blocked: no
</code></pre>

<p>通过rfkill启用/禁用设备无法对硬件阻塞产生作用。</p>

<p>由于笔记本只有一个无线网卡，这两个模块应该是有冲突</p>

<p>使用命令lsmod | grep acer可以看出系统启动了acer_wmi模块</p>

<p>通过查找资料后，解决方法为禁用acer_wmi模块。</p>

<p>解决方法：</p>

<p>通过在/etc/modprobe.d/文件夹下，编辑blacklist.conf文件，最后一行添加内容：  <code>blacklist acer_wmi</code></p>

<pre><code>sudo gedit /etc/modprobe.d/blacklist.conf
</code></pre>

<p>重启<br/>
wifi自动为打开状态，此时rfkill list all命令结果如下:</p>

<pre><code>rfkill list all

0: phy0: Wireless LAN
Soft blocked: no
Hard blocked: no
</code></pre>

<p>版权声明：本文为CSDN博主「Monkey_D_Shuai」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。
原文链接：<a href="https://blog.csdn.net/ls12165/article/details/68189943">https://blog.csdn.net/ls12165/article/details/68189943</a></p>

<p><a href="https://blog.csdn.net/ls12165/article/details/68189943?spm=1001.2101.3001.6650.1&amp;utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~default-1.no_search_link&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~default-1.no_search_link&amp;utm_relevant_index=2">原文链接</a></p>

<p><a href="https://blog.csdn.net/weixin_34305091/article/details/116951261?spm=1001.2101.3001.6650.1&amp;utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7Edefault-1.no_search_link&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7Edefault-1.no_search_link&amp;utm_relevant_index=2">另一篇博文</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress 3.0 脚本运行 Build Preview Deploy Push-posts .sh文件]]></title>
    <link href="https://qiuhaidong.github.io/blog/2022/01/07/octopress-3-preview-deploy-push-posts-sh/"/>
    <updated>2022-01-07T06:34:42+08:00</updated>
    <id>https://qiuhaidong.github.io/blog/2022/01/07/octopress-3-preview-deploy-push-posts-sh</id>
    <content type="html"><![CDATA[<p>preview.sh代码</p>

<pre><code>#!/bin/sh
cd /home/dong/haydnyau
jekyll build #生成
jekyll serve
</code></pre>

<hr />

<p>deploy.sh代码</p>

<pre><code>#!/bin/sh
cd /home/dong/haydnyau
jekyll build
octopress deploy
</code></pre>

<hr />

<p>（不行，这个会造成有些blog页面头尾显示不全）发布，并上传/_posts/源文件，deploy.sh 代码</p>

<pre><code>#!/bin/sh
cd /home/dong/haydnyau
jekyll build
mv _posts/ _site/
octopress deploy
mv _site/_posts/ .
</code></pre>

<p>注意这个点 &ldquo;.&rdquo;
<code>.</code> 或者 <code>./</code> 表示当前目录</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[创建octopress3.0简单说明]]></title>
    <link href="https://qiuhaidong.github.io/blog/2022/01/07/octopress3-0/"/>
    <updated>2022-01-07T06:02:12+08:00</updated>
    <id>https://qiuhaidong.github.io/blog/2022/01/07/octopress3-0</id>
    <content type="html"><![CDATA[<h3>注意，下面的有些步骤不适合</h3>

<h4>先到jekyll官网，用它的方法安装好本地博客，再看几个octopress3.0的教程，比如官方github的和<a href="https://www.sitepoint.com/octopress-3-arrives-to-make-blog-generation-crazy-simple/">博文1，Octopress 3 Arrives to Make Blog Generation Crazy Simple</a>  ，安装octopress，用它来上传blog，结合下面的前面几步，git，rvm，ruby，bundler，bundle install(or bundle)</h4>

<p>重装octopress 2.0 博客失败<br/>
很多新旧的软件，依赖，都不兼容了<br/>
算了，世界在发展，有的旧事物必然被淘汰<br/>
毕竟连作者都不维护了<br/>
而且连3.0都不维护了</p>

<hr />

<p><a href="https://www.sitepoint.com/octopress-3-arrives-to-make-blog-generation-crazy-simple/">博文1，Octopress 3 Arrives to Make Blog Generation Crazy Simple</a></p>

<p><a href="https://jingsam.github.io/2015/10/21/blogging-with-octopress-3-0.html">博文2，Octopress 3.0博客搭建教程</a></p>

<p>安装git<br/>
设置好用户名，email等等，参见之前的blog<br/>
添加ssh钥匙到github<br/>
安装rvm<br/>
安装ruby 2.7.0,好像默认就是<br/>
<a href="https://blog.csdn.net/qq_41988167/article/details/106202868">修复安装2.2.6失败的教程</a><br/>
安装octopress</p>

<pre><code>gem install octopress
</code></pre>

<p>创建博客的主文件夹</p>

<pre><code>octopress new haydnyau #名字自取
</code></pre>

<p>新建一篇blog</p>

<pre><code>octopress new post hello world
</code></pre>

<p>生成网页</p>

<pre><code>jekyll build
</code></pre>

<p>为避免下面的错误：</p>

<pre><code>sudo bundle add webrick
</code></pre>

<p>本地预览</p>

<pre><code>jekyll serve
</code></pre>

<h3><a href="https://github.com/jekyll/jekyll/issues/8523">可能会报错,参见此blog</a></h3>

<p><img src="https://r.photo.store.qq.com/psc?/V53xBhKC4JFvE03uTNAL1QWxNF23xXMs/TmEUgtj9EK6.7V8ajmQrEOrm72ctF5gw0aqWv21aZeNSASWKMfjZMh4q6GkEqIeM78CkO7o4O*iqGXdxCboPoKIKO9drAx052jTS2quUV58!/r" alt="jekyll serve, cannot load such file -- webrick (LoadError)" /></p>

<pre><code>dong@Ubuntu:~/haydnyau$ bundle exec jekyll serve
Configuration file: /home/dong/haydnyau/_config.yml
            Source: /home/dong/haydnyau
       Destination: /home/dong/haydnyau/_site
 Incremental build: disabled. Enable with --incremental
      Generating... 
       Jekyll Feed: Generating feed for posts
                    done in 0.398 seconds.
 Auto-regeneration: enabled for '/home/dong/haydnyau'
                    ------------------------------------------------
      Jekyll 4.2.1   Please append `--trace` to the `serve` command 
                     for any additional information or backtrace. 
                    ------------------------------------------------
/home/dong/.rvm/gems/ruby-3.1.0/gems/jekyll-4.2.1/lib/jekyll/commands/serve/servlet.rb:3:in `require': cannot load such file -- webrick (LoadError)
    from /home/dong/.rvm/gems/ruby-3.1.0/gems/jekyll-4.2.1/lib/jekyll/commands/serve/servlet.rb:3:in `&lt;top (required)&gt;'
    from /home/dong/.rvm/gems/ruby-3.1.0/gems/jekyll-4.2.1/lib/jekyll/commands/serve.rb:179:in `require_relative'
    from /home/dong/.rvm/gems/ruby-3.1.0/gems/jekyll-4.2.1/lib/jekyll/commands/serve.rb:179:in `setup'
    from /home/dong/.rvm/gems/ruby-3.1.0/gems/jekyll-4.2.1/lib/jekyll/commands/serve.rb:100:in `process'
    from /home/dong/.rvm/gems/ruby-3.1.0/gems/jekyll-4.2.1/lib/jekyll/command.rb:91:in `block in process_with_graceful_fail'
    from /home/dong/.rvm/gems/ruby-3.1.0/gems/jekyll-4.2.1/lib/jekyll/command.rb:91:in `each'
    from /home/dong/.rvm/gems/ruby-3.1.0/gems/jekyll-4.2.1/lib/jekyll/command.rb:91:in `process_with_graceful_fail'
    from /home/dong/.rvm/gems/ruby-3.1.0/gems/jekyll-4.2.1/lib/jekyll/commands/serve.rb:86:in `block (2 levels) in init_with_program'
    from /home/dong/.rvm/gems/ruby-3.1.0/gems/mercenary-0.4.0/lib/mercenary/command.rb:221:in `block in execute'
    from /home/dong/.rvm/gems/ruby-3.1.0/gems/mercenary-0.4.0/lib/mercenary/command.rb:221:in `each'
    from /home/dong/.rvm/gems/ruby-3.1.0/gems/mercenary-0.4.0/lib/mercenary/command.rb:221:in `execute'
    from /home/dong/.rvm/gems/ruby-3.1.0/gems/mercenary-0.4.0/lib/mercenary/program.rb:44:in `go'
    from /home/dong/.rvm/gems/ruby-3.1.0/gems/mercenary-0.4.0/lib/mercenary.rb:21:in `program'
    from /home/dong/.rvm/gems/ruby-3.1.0/gems/jekyll-4.2.1/exe/jekyll:15:in `&lt;top (required)&gt;'
    from /home/dong/.rvm/gems/ruby-3.1.0/bin/jekyll:25:in `load'
    from /home/dong/.rvm/gems/ruby-3.1.0/bin/jekyll:25:in `&lt;main&gt;'
    from /home/dong/.rvm/gems/ruby-3.1.0/bin/ruby_executable_hooks:22:in `eval'
    from /home/dong/.rvm/gems/ruby-3.1.0/bin/ruby_executable_hooks:22:in `&lt;main&gt;'
dong@Ubuntu:~/haydnyau$ 
</code></pre>

<p>原因：</p>

<h3>回答1：</h3>

<p>This happens because webrick is no longer a bundled gem in Ruby 3.0. From <a href="https://www.ruby-lang.org/en/news/2020/12/25/ruby-3-0-0-released/:">https://www.ruby-lang.org/en/news/2020/12/25/ruby-3-0-0-released/:</a></p>

<blockquote><ul>
<li>The following libraries are no longer bundled gems or standard libraries. Install the corresponding gems to use these features.</li>
<li>sdbm</li>
<li>webrick</li>
<li>net-telnet</li>
<li>xmlrpc</li>
</ul>
</blockquote>

<p>Adding <code>gem "webrick"</code> to my Gemfile solves the problem, but Jekyll should include it in its gemspec.</p>

<h2>回答2：</h2>

<p>I think you want run: <code>bundle add webrick</code>.</p>

<p>我运行：</p>

<pre><code>sudo bundle add webrick
</code></pre>

<p><img src="https://r.photo.store.qq.com/psc?/V53xBhKC4JFvE03uTNAL1QWxNF23xXMs/TmEUgtj9EK6.7V8ajmQrEBN4rGxoHZRJvba1HYTQq27ffRKlLPwSuElBnQsx8myUeNz3PvYmrJfIi3*2TZPi9OuuBIJmyilHvC5IQwNqaYw!/r" alt="sudo bundle add webrick" /></p>

<pre><code>dong@Ubuntu:~/haydnyau$ bundle add webrick
Fetching gem metadata from https://rubygems.org/.........
Resolving dependencies...
Fetching gem metadata from https://rubygems.org/.........
Resolving dependencies...
Using public_suffix 4.0.6
Using bundler 2.3.4
Using colorator 1.1.0
Using concurrent-ruby 1.1.9
Using eventmachine 1.2.7
Using http_parser.rb 0.8.0
Using ffi 1.15.4
Using forwardable-extended 2.6.0
Using rb-fsevent 0.11.0
Using rexml 3.2.5
Using liquid 4.0.3
Using mercenary 0.4.0
Using rouge 3.27.0
Using safe_yaml 1.0.5
Using unicode-display_width 1.8.0
Using webrick 1.7.0
Using addressable 2.8.0
Using sassc 2.4.0
Using rb-inotify 0.10.1
Using kramdown 2.3.1
Using terminal-table 2.0.0
Using listen 3.7.0
Using kramdown-parser-gfm 1.1.0
Using jekyll-sass-converter 2.1.0
Using pathutil 0.16.2
Using em-websocket 0.5.3
Using i18n 1.8.11
Using jekyll-watch 2.2.1
Using jekyll 4.2.1
Using jekyll-feed 0.16.0
Using jekyll-seo-tag 2.7.1
Using minima 2.5.1
dong@Ubuntu:~/haydnyau$ 
</code></pre>

<p>问题解决</p>

<p>解决前后的Gemfile文件：<br/>
<img src="https://r.photo.store.qq.com/psc?/V53xBhKC4JFvE03uTNAL1QWxNF23xXMs/TmEUgtj9EK6.7V8ajmQrEJRCIzYAaW3bXX8u6*IVJZ.XtCdPn6AvRrMkapg1VV.CqGful*eQepRFyH0ztMqVtAXon32yueiaIigulllP3VI!/r" alt="Genfile，前" /><br/>
<img src="https://r.photo.store.qq.com/psc?/V53xBhKC4JFvE03uTNAL1QWxNF23xXMs/TmEUgtj9EK6.7V8ajmQrECtxM1XJmWMiuXm2sA41EdXEaIr2GF1uWWNzSBr7KU5QsmUQqXrNTxgBvdf2nvM66ZFdRT4*rwlgIb3LIswYiAo!/r" alt="Genfile，后" /></p>

<p>生成发布配置文件</p>

<pre><code>octopress deploy init git git@github.com:haydnyau/haydnyau.github.com.git
</code></pre>

<p>发布</p>

<pre><code>octopress deploy
</code></pre>

<p>git上传</p>

<pre><code>git init
git add .
</code></pre>

<p>还有的以后琢磨<br/>
买个早餐，吃饱，睡觉</p>

<hr />

<h1>下面的是详细一点但有点杂乱的，若已经创建好，不必要看</h1>

<hr />

<p>欢迎来到octopress3.0<br/>
折腾两三天了<br/>
先简单说说吧，详细的自己再琢磨<br/>
安装以下的：<br/>
git，设置好用户名，email等等，参见之前的blog<br/>
添加ssh钥匙到github<br/>
安装rvm<br/>
安装ruby</p>

<pre><code>dong@Ubuntu:~$ rvm install 3.1.0
dong@Ubuntu:~$ rvm use 3.1.0
dong@Ubuntu:~$ rvm rubygems latest
</code></pre>

<p>install the Octopress gem. From your terminal:</p>

<pre><code>dong@Ubuntu:~$ gem install octopress
</code></pre>

<p>And with that, you have Octopress installed!<br/>
Blog Creation<br/>
Getting up and running is easy with the new Octopress CLI commands. Navigate to your working directory and run the command below:</p>

<pre><code>octopress new haydnyau 
</code></pre>

<p>This will create a directory named <strong>haydnyau</strong> with scaffolding for the website. Replace “haydnyau” with whatever you want to call your blog. Navigate to the newly crewated directory and open up your text editor to see what you have.</p>

<p>Creating a Post<br/>
We can create a new post using one of the Octopress CLI commands:</p>

<pre><code>octopress new post hello world
</code></pre>

<p>This command creates a new blog post with the title <strong>hello world</strong>. You can obviously use any title of your choice. The post is created in the <strong>_posts</strong> directory.</p>

<p>Viewing the Site<br/>
Before the site can be viewed it has to be built. Since Octopress is a wrapper around Jekyll, we will use the command below to build:</p>

<pre><code>jekyll build
</code></pre>

<p>That will build a static HTML website that can be found in the _site directory. This is built out of the markdown files for pages, posts, stylesheets, and config.</p>

<p>To view the site run the command below from your terminal:</p>

<pre><code>jekyll serve
</code></pre>

<p>Then, point your browser to the address <strong>localhost:4000</strong>.<br/>
Configuration<br/>
Octopress has a configuration file where you manage the settings for the website. This is the <strong>_config.yml</strong> file located in the home directory of the site. Here is an example of what it looks like:</p>

<pre><code># Site settings
title: Your awesome title
email: your-email@domain.com
description: &gt; # this means to ignore newlines until "baseurl:"
  Write an awesome description for your new site here. You can edit this
  line in _config.yml. It will appear in your document head meta (for
  Google search results) and in your feed.xml site description.
baseurl: "" # the subpath of your site, e.g. /blog/
url: "http://yourdomain.com" # the base hostname &amp; protocol for your site
twitter_username: jekyllrb
github_username:  jekyll

# Build settings
markdown: kramdown
</code></pre>

<p>From the configuration file, you can add your Twitter and Github usernames. They will show up at the bottom of your page, along with the description. Feel free to edit the settings as desired by adding the necessary information. You will have to restart your server for the configuration changes to show up in your browser. You can stop the server by pressing CTRL+C.</p>

<p>Deploying to GitHub Pages<br/>
We will be hosting our blog on GitHub. Create an account if you do not have one yet.</p>

<p>Create a new repository, give it a name in this format; <strong>username.github.com</strong>, replacing <strong>username</strong> with your Github username. Mine looks like this <strong>haydnyau.github.com</strong>.</p>

<p>Generate the deployment configuration file for our blog using octopress deploy init command.</p>

<pre><code>octopress deploy init git git@github.com:haydnyau/haydnyau.github.com.git
</code></pre>

<p>This generates a file called _deploy.yml, which contains the deployment configuration:</p>

<pre><code>method: git                               # How do you want to deploy? git, rsync or s3.
site_dir: _site                           # Location of your static site files.

git_url: git@github.com:kinsomicrote/kinsomicrote.github.io  # remote repository url, e.g. git@github.com:username/repo_name

# Note on git_branch:
# If using GitHub project pages, set the branch to 'gh-pages'.
# For GitHub user/organization pages or Heroku, set the branch to 'master'.
#
git_branch: master                        # Git branch where static site files are commited


# remote_path:                            # Destination directory
</code></pre>

<p>Now deploy!</p>

<pre><code>octopress deploy
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS的升级与降级]]></title>
    <link href="https://qiuhaidong.github.io/blog/2020/07/03/ios-upgrade-and-downgrade/"/>
    <updated>2020-07-03T17:35:30+08:00</updated>
    <id>https://qiuhaidong.github.io/blog/2020/07/03/ios-upgrade-and-downgrade</id>
    <content type="html"><![CDATA[<p>升级bate版，到官网上注册，下载描述文件，常规升级</p>

<p>降级：<br/>
举例：<br/>
iOS14降级为13.5.1：</p>

<h3>1. iTunes备份数据到电脑</h3>

<ul>
<li>建议再备份到iCloud</li>
<li>微信聊天记录备份到另一手机</li>
</ul>


<h3>2. 爱思助手下载固件，选择：常规快速刷机</h3>

<ul>
<li>注意：降级不能选择：保留用户资料</li>
<li>第一次电信宽带，刷机在60%失败</li>
<li>第二次翻墙（全部代理），同样失败</li>
<li>第三次手机网络（联通），USB分享，成功</li>
<li>只用了3M流量</li>
<li>每次刷机都是10分钟左右，挺快的</li>
</ul>


<h3>3. 找到备份文件，Info.plist，更改固件版本</h3>

<ul>
<li>Product Version：14.0改为13.5.1</li>
<li>Build Version：18A5301v改为17F80</li>
<li>因为高版本的备份无法还原到低版本的系统</li>
</ul>


<h3>4. 开机后从电脑恢复数据</h3>
]]></content>
  </entry>
  
</feed>
