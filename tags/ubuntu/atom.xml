<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: ubuntu | 丘海东]]></title>
  <link href="https://qiuhaidong.github.io/tags/ubuntu/atom.xml" rel="self"/>
  <link href="https://qiuhaidong.github.io/"/>
  <updated>2024-01-16T18:24:53+08:00</updated>
  <id>https://qiuhaidong.github.io/</id>
  <author>
    <name><![CDATA[丘海东]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[ubuntu安装deb文件]]></title>
    <link href="https://qiuhaidong.github.io/blog/2023/06/16/install-deb/"/>
    <updated>2023-06-16T01:38:49+08:00</updated>
    <id>https://qiuhaidong.github.io/blog/2023/06/16/install-deb</id>
    <content type="html"><![CDATA[<p>Ubuntu下安装deb包的命令总结</p>

<p><a href="https://blog.csdn.net/cui_shuang_xi/article/details/90904929">原文链接</a></p>

<p>在Ubuntu下安装deb包需要使用dpkg命令.</p>

<p>Dpkg 的普通用法：</p>

<pre><code>sudo dpkg -i &lt;package.deb&gt;  
</code></pre>

<p>安装一个 Debian 软件包，如你手动下载的文件。</p>

<pre><code>sudo dpkg -c &lt;package.deb&gt;  
</code></pre>

<p>列出 <package.deb> 的内容。</p>

<pre><code>sudo dpkg -I &lt;package.deb&gt;  
</code></pre>

<p>从 <package.deb> 中提取包裹信息。</p>

<pre><code>sudo dpkg -r  
</code></pre>

<p>移除一个已安装的包裹。</p>

<pre><code>sudo dpkg -P  
</code></pre>

<p>完全清除一个已安装的包裹。和 remove 不同的是，remove 只是删掉数据和可执行文件，purge 另外还删除所有的配制文件。</p>

<pre><code>sudo dpkg -L  
</code></pre>

<p>列出 安装的所有文件清单。同时请看 dpkg -c 来检查一个 .deb 文件的内容。</p>

<pre><code>sudo dpkg -s  
</code></pre>

<p>显示已安装包裹的信息。同时请看 apt-cache 显示 Debian 存档中的包裹信息，以及 dpkg -I 来显示从一个 .deb 文件中提取的包裹信息。</p>

<pre><code>sudo dpkg-reconfigure  
</code></pre>

<p>重新配制一个已经安装的包裹，如果它使用的是 debconf (debconf 为包裹安装提供了一个统一的配制界面)。</p>

<p>如果安装过程中出现问题,可以先使用命令:</p>

<pre><code>sudo apt-get update  
</code></pre>

<p>更新后再执行上面的命令.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ubuntu2022年无法添加引导windows，官方禁用OS Prober]]></title>
    <link href="https://qiuhaidong.github.io/blog/2022/01/15/ubuntu-cannot-boot-windows/"/>
    <updated>2022-01-15T15:34:36+08:00</updated>
    <id>https://qiuhaidong.github.io/blog/2022/01/15/ubuntu-cannot-boot-windows</id>
    <content type="html"><![CDATA[<h3><a href="https://www.oschina.net/news/174751/ubuntu-22.04-multi-boot-changes">原博：OS Prober 被禁用，Ubuntu 正在考虑新的多重引导方案</a></h3>

<p>GNU GRUB（GRUB）是一个来自 GNU 项目的启动引导程序。它允许用户在计算机内同时拥有多个操作系统，并在计算机启动时选择希望运行的操作系统。</p>

<p>今年 6 月，由于上游 GRUB 引导程序在发布 2.06 版本时禁用 OS_Prober 后所带来的一些变化，Ubuntu 的开发者正在考虑如何在 Ubuntu 22.04 LTS 中管理双引导/多引导方案。</p>

<p>Ubuntu 依靠 OS-Prober 来检查其他已安装的操作系统，以便能够方便地在 GRUB 引导程序中显示它们。这意味着随着 Ubuntu 22.04 转向 GRUB 2.06，非 UEFI BIOS 用户不能再启动任何其他操作系统，而基于 UEFI 的系统如果通过 UEFI 引导程序，则仍然可以启动其他操作系统。这个问题主要是会阻碍那些仍然运行传统 BIOS 启动程序的用户使用已安装的系统。</p>

<p>默认禁用OS-Prober旨在通过操作系统检测功能解决潜在的安全问题，因为它在检查其他操作系统时，会检查并挂载系统上的所有分区，如果利用文件系统的漏洞，启用该功能会引发一个能被黑客利用的安全问题。</p>

<p>因此，面对安全和用户体验这个两难的选择下，Ubuntu 开发者也不得不考虑是否要重新启用 OS-Prober。</p>

<p>因为 OS_Prober 存在潜在安全风险，所以重新启用它并不是一个理想的解决方案，目前 Ubuntu 团队内部也在仔细思考这个问题，但不排除这个可能性。</p>

<p>Ubuntu 团队考虑的其他解决方案包括：创建一个新的 GRUB 模块，该模块只在用户查找系统时才执行 OS-Prober 的一些功能，用于增加一个链式启动选项专门处理用户需要启动 Windows 的需求；亦或是仅在安装系统时运行 OS-Prober，然后依靠该信息进行后续启动；最后一种可能性是，从以前的 Ubuntu 版本升级到 Ubuntu 22.04 时启用 OS-Prober。</p>

<p>我们还不清楚 Ubuntu 团队在上述选择中最终会如何进行抉择，在 Ubuntu 22.04 正式推出之前还有充足的考虑时间，可以访问 ubuntu-devel 了解更多详情。我们也将关注 GRUB 上游在此期间是否也会推出相应的解决方案。</p>
]]></content>
  </entry>
  
</feed>
